*mini.tabline* Tabline
*MiniTabline*

MIT License Copyright (c) 2021 Evgeni Chasnovski

==============================================================================

Key idea: show all listed buffers in readable way with minimal total width.
Also allow showing extra information section in case of multiple vim tabpages.

Features:
- Buffers are listed in the order of their identifier (see |bufnr()|).

- Different highlight groups for "states" of buffer affecting 'buffer tabs'.

- Buffer names are made unique by extending paths to files or appending
  unique identifier to buffers without name.

- Current buffer is displayed "optimally centered" (in center of screen
  while maximizing the total number of buffers shown) when there are many
  buffers open.

- 'Buffer tabs' are clickable if Neovim allows it.

What it doesn't do:
- Custom buffer order is not supported.

# Dependencies ~

Suggested dependencies (provide extra functionality, tabline will work
without them):
- Plugin 'nvim-tree/nvim-web-devicons' for filetype icons near the buffer
  name. If missing, no icons will be shown.

# Setup ~

This module needs a setup with `require('mini.tabline').setup({})`
(replace `{}` with your `config` table). It will create global Lua table
`MiniTabline` which you can use for scripting or manually (with
`:lua MiniTabline.*`).

See |MiniTabline.config| for `config` structure and default values.

You can override runtime config settings locally to buffer inside
`vim.b.minitabline_config` which should have same structure as
`MiniTabline.config`. See |mini.nvim-buffer-local-config| for more details.

# Highlight groups ~

* `MiniTablineCurrent` - buffer is current (has cursor in it).
* `MiniTablineVisible` - buffer is visible (displayed in some window).
* `MiniTablineHidden` - buffer is hidden (not displayed).
* `MiniTablineModifiedCurrent` - buffer is modified and current.
* `MiniTablineModifiedVisible` - buffer is modified and visible.
* `MiniTablineModifiedHidden` - buffer is modified and hidden.
* `MiniTablineFill` - unused right space of tabline.
* `MiniTablineTabpagesection` - section with tabpage information.

To change any highlight group, modify it directly with |:highlight|.

# Disabling ~

To disable (show empty tabline), set `vim.g.minitabline_disable` (globally) or
`vim.b.minitabline_disable` (for a buffer) to `true`. Considering high number
of different scenarios and customization intentions, writing exact rules
for disabling module's functionality is left to user. See
|mini.nvim-disabling-recipes| for common recipes.

------------------------------------------------------------------------------
                                                           *MiniTabline.setup()*
                         `MiniTabline.setup`({config})
Module setup

Parameters ~
{config} `(table|nil)` Module config table. See |MiniTabline.config|.

Usage ~
`require('mini.tabline').setup({})` (replace `{}` with your `config` table)

------------------------------------------------------------------------------
                                                  *MiniTabline.default_format()*
                `MiniTabline.default_format`({buf_id}, {label})
Default formatting of tab's label

Return label without changes.

Parameters ~
{buf_id} `(number)` Identifier of tab's buffer.
{label} `(string)` Tab's label.

------------------------------------------------------------------------------
                                                            *MiniTabline.config*
                              `MiniTabline.config`
Module config

Default values:
>
  MiniTabline.config = {
    -- Whether to show file icons (requires 'nvim-tree/nvim-web-devicons')
    show_icons = true,

    -- Whether to set Vim's settings for tabline (make it always shown and
    -- allow hidden buffers)
    set_vim_settings = true,

    -- Where to show tabpage section in case of multiple vim tabpages.
    -- One of 'left', 'right', 'none'.
    tabpage_section = 'left',

    -- A callable defining how tab's label is formatted.
    --
    -- It will be called with the following arguments:
    -- - `buf_id` - identifier of tab's buffer.
    -- - `label` - tab's label.
    --
    -- It should return a string, which will be used as tab's label.
    --
    -- Example (adding marker to modified tabs): >
    --
    --   local format = function(buf_id, label)
    --     local modified = vim.api.nvim_get_option_value('modified', { buf = buf_id })
    --     if modified then return string.format('%s [+]', label) else return label end
    --   end
    format = MiniTabline.default_format,
  }
<

------------------------------------------------------------------------------
                                             *MiniTabline.make_tabline_string()*
                      `MiniTabline.make_tabline_string`()
Make string for |tabline|


 vim:tw=78:ts=8:noet:ft=help:norl: